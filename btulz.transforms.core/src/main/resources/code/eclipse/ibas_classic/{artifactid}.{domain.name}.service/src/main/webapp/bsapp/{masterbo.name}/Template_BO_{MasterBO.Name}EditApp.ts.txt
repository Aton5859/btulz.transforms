/**
 * @license
 * Copyright color-coding studio. All Rights Reserved.
 *
 * Use of this source code is governed by an Apache License, Version 2.0
 * that can be found in the LICENSE file at http://www.apache.org/licenses/LICENSE-2.0
 */

import * as ibas from "ibas/index";
import * as bo from "../../borep/bo/index";
import { BORepository${Domain.getName()} } from "../../borep/BORepositories";

/** 应用-${BO.getDescription()} */
export class ${BO.getName()}EditApp extends ibas.BOEditApplication<I${BO.getName()}EditView, bo.${BO.getName()}> {

    /** 应用标识 */
    static APPLICATION_ID: string = "${ID.newUUID()}";
    /** 应用名称 */
    static APPLICATION_NAME: string = "${Domain.Name().toLowerCase()}_app_${BO.getName().toLowerCase()}_edit";
    /** 业务对象编码 */
    static BUSINESS_OBJECT_CODE: string = bo.${BO.getName()}.BUSINESS_OBJECT_CODE;
    /** 构造函数 */
    constructor() {
        super();
        this.id = ${BO.getName()}EditApp.APPLICATION_ID;
        this.name = ${BO.getName()}EditApp.APPLICATION_NAME;
        this.boCode = ${BO.getName()}EditApp.BUSINESS_OBJECT_CODE;
        this.description = ibas.i18n.prop(this.name);
    }
    /** 注册视图 */
    protected registerView(): void {
        super.registerView();
        // 其他事件
        this.view.deleteDataEvent = this.deleteData;
$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
        this.view.add${BOItem.getName()}Event = this.add${BOItem.getName()};
        this.view.remove${BOItem.getName()}Event = this.remove${BOItem.getName()};
$END_BOITEM_RELATION_IS_ONETOMANY$
$END_BOITEM$
    }
    /** 视图显示后 */
    protected viewShowed(): void {
        // 视图加载完成
        this.view.show${BO.getName()}(this.editData);
$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
        this.view.show${BOItem.getName()}s(this.editData.${BOItem.getName(LowerCamelCase)}s);
$END_BOITEM_RELATION_IS_ONETOMANY$
$END_BOITEM$
    }
    /** 运行,覆盖原方法 */
    run(...args: any[]): void {
        // 尝试设置编辑对象
        if (!ibas.object.isNull(args) && args.length === 1 && args[0] instanceof bo.${BO.getName()}) {
            this.editData = args[0];
        }
        // 创建编辑对象实例
        if (ibas.object.isNull(this.editData)) {
            this.editData = new bo.${BO.getName()}();

        }
        super.run();
    }
    /** 待编辑的数据 */
    protected editData: bo.${BO.getName()};
    /** 保存数据 */
    protected saveData(): void {
        try {
            let that = this;
            let boRepository: BORepository${Domain.getName()} = new BORepository${Domain.getName()}();
            boRepository.save${BO.getName()}({
                beSaved: this.editData,
                onCompleted(opRslt: ibas.IOperationResult<bo.${BO.getName()}>): void {
                    try {
                        that.busy(false);
                        if (opRslt.resultCode !== 0) {
                            throw new Error(opRslt.message);
                        }
                        if (opRslt.resultObjects.length === 0) {
                            this.messages(ibas.emMessageType.SUCCESS, "{0}{1}",
                                ibas.i18n.prop("sys_shell_ui_data_delete"),
                                ibas.i18n.prop("sys_shell_ui_sucessful"));
                            // 创建新的对象
                            this.editData = new bo.${BO.getName()}();
                        } else {
                            // 替换编辑对象
                            this.editData = opRslt.resultObjects.firstOrDefault();
                            this.messages(ibas.emMessageType.SUCCESS, "{0}{1}",
                                ibas.i18n.prop("sys_shell_ui_data_save"),
                                ibas.i18n.prop("sys_shell_ui_sucessful"));
                        }
                        // 刷新当前视图
                        this.viewShowed();
                    } catch (error) {
                        that.messages(error);
                    }
                }
            });
            this.busy(true);
            this.proceeding(ibas.emMessageType.INFORMATION, ibas.i18n.prop("sys_shell_saving_data"));
        } catch (error) {
            this.messages(error);
        }
    }

    /** 删除数据 */
    protected deleteData(): void {
        let that = this;
        this.messages({
            type: ibas.emMessageType.QUESTION,
            title: ibas.i18n.prop(this.name),
            message: ibas.i18n.prop("msg_whether_to_delete"),
            actions: [ibas.emMessageAction.YES, ibas.emMessageAction.NO],
            onCompleted(action: ibas.emMessageAction): void {
                if (action === ibas.emMessageAction.YES) {
                    that.editData.delete();
                    that.saveData();
                }
            }
        });
    }
$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
    /** 添加${BOItem.getDescription()}事件 */
    add${BOItem.getName()}(): void {
        this.editData.${BOItem.getName(LowerCamelCase)}s.create();
        this.view.show${BOItem.getName()}s(this.editData.${BOItem.getName(LowerCamelCase)}s);
    }
    /** 删除${BOItem.getDescription()}事件 */
    remove${BOItem.getName()}(item: bo.${BOItem.getName()}): void {
        if (this.editData.${BOItem.getName(LowerCamelCase)}s.indexOf(item) >= 0) {
            this.editData.${BOItem.getName(LowerCamelCase)}s.remove(item);
            this.view.show${BOItem.getName()}s(this.editData.${BOItem.getName(LowerCamelCase)}s);
        }
    }

$END_BOITEM_RELATION_IS_ONETOMANY$
$END_BOITEM$
}
/** 视图-${BO.getDescription()} */
export interface I${BO.getName()}EditView extends ibas.IBOEditView {
    /** 显示数据 */
    show${BO.getName()}(data: bo.${BO.getName()}): void;
    /** 删除数据事件 */
    deleteDataEvent: Function;
$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
    /** 添加${BOItem.getDescription()}事件 */
    add${BOItem.getName()}Event: Function;
    /** 删除${BOItem.getDescription()}事件 */
    remove${BOItem.getName()}Event: Function;
    /** 显示数据 */
    show${BOItem.getName()}s(datas: bo.${BOItem.getName()}[]): void;
$END_BOITEM_RELATION_IS_ONETOMANY$
$END_BOITEM$
}